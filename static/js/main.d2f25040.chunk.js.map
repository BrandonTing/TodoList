{"version":3,"sources":["Components/FullList/List/List.module.css","Components/CurrentTask/CurrentTask.module.css","Components/TodoTasks/TodoTasks.module.css","Components/CreateNewTask/CreateNewTask.module.css","Container/ToDoLists/ToDoList.module.css","Components/TodoTasks/Task/Task.module.css","Components/MoonAnimaion/MoonAnimation.module.css","Components/MoonAnimaion/MoonImage/MoonImage.module.css","Assets/Images/moon.png","Components/FullList/FullList.module.css","Assets/Audio/Alarm/Alarm_Clock.mp3","Assets/Audio/Alarm/Bugle_Tune.mp3","Assets/Audio/Alarm/Dinner_Bell_Triangle.mp3","Assets/Audio/Alarm/Medium_Bell_Ringing_Near.mp3","Assets/Audio/Music/Back_To_The_Wood.mp3","Assets/Audio/Music/Dusty_Road.mp3","Assets/Audio/Music/Stale_Mate.mp3","Components/MoonAnimaion/MoonImage/MoonImage.js","Components/MoonAnimaion/MoonAnimation.js","Components/CreateNewTask/CreateNewTask.js","Components/CurrentTask/CurrentTask.js","Components/TodoTasks/Task/Task.js","Components/TodoTasks/TodoTasks.js","Components/FullList/List/List.js","Components/FullList/FullList.js","Assets/Audio/Alarm/Alarm.js","Assets/Audio/Music/Music.js","Container/ToDoLists/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","moonImage","props","Fragment","src","MoonImg","alt","className","classes","moonAnimation","animationState","running","classNames","showAnimation","BaseMoonShadow","BaseMoonShadow2","style","animation","animationForm","animationPlayState","animationDuration","targetTime","MoonArea","MoonImage","createNewTask","NewTask","onSubmit","submitted","Input","type","inputElement","elementConfig","placeholder","value","onChange","inputChanged","required","Select","selectElement","selectChanged","options","map","option","key","displayValue","Button","Add","join","onGoingTasks","timesRemain","currentTask","time","timesPassed","minsRemain","Math","floor","secRemain","buttonShow","isRunning","onClick","pauseClicked","disabled","Pause","startClicked","Start","CurrentTask","CurrentName","name","CurrentTime","resetClicked","Reset","task","onGoing","buttonClicked","taskClicked","todoTasks","taskLists","tasks","filter","indexOf","slice","CSSTransition","enter","enterActive","exitActive","exit","timeout","Task","more","length","href","More","TasksList","TransitionGroup","component","List","list","buttonText","btnType","shouldExpand","items","item","itemClicked","ListType","toUpperCase","clicked","fullList","Object","keys","propsName","itemUnDone","itemChange","FullList","id","alarms","MediumBellRingingNear","AlarmClock","BugleTune","DinnerBellTriangle","musics","BackToTheWood","DustyRoad","StaleMate","TodoList","state","Todo","Done","Music","Musics","Alarm","Alarms","currentState","alarm","music","formContent","input","select","intervalId","taskStartHandler","startTime","Date","getTime","updatedTimePassed","timer","setInterval","clearInterval","load","play","setTimeout","pause","taskDoneHandler","setState","taskPauseHandler","taskResetHandler","ChangeHandler","event","updatedContent","target","updatedForm","newTaskHandler","preventDefault","updatedTasks","currentStateChangeHandler","updatedIndex","updatedState","splice","push","updatedTodoTask","updatedDoneTask","updatedCurrentTask","updatedCurrentState","expandHandler","prevState","changeItemHandler","itemType","WorkingList","scrollIntoView","behavior","ref","CurrentTaskArea","this","CreateNewTask","content","TodoTasks","MediaArea","controls","loop","Component","App","ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2f25040.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__2soWQ\",\"ListType\":\"List_ListType__3ZrcB\",\"item\":\"List_item__1-2Mp\",\"items\":\"List_items__mNZBS\",\"move-enter\":\"List_move-enter__3iZJd\",\"move-enter-active\":\"List_move-enter-active__25rxY\",\"move-exit\":\"List_move-exit__3SJFQ\",\"move-exit-active\":\"List_move-exit-active__2wUXh\",\"Button\":\"List_Button__3sFcn\",\"Start\":\"List_Start__Q9115\",\"Done\":\"List_Done__1QKjR\",\"Add\":\"List_Add__NZBE1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CurrentTask\":\"CurrentTask_CurrentTask__hdieN\",\"CurrentTime\":\"CurrentTask_CurrentTime__2KNt2\",\"CurrentName\":\"CurrentTask_CurrentName__6jky2\",\"Button\":\"CurrentTask_Button___Pp44\",\"Start\":\"CurrentTask_Start__11mpk\",\"Pause\":\"CurrentTask_Pause__3-Oar\",\"Reset\":\"CurrentTask_Reset__22gyc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TasksList\":\"TodoTasks_TasksList__2cO04\",\"List\":\"TodoTasks_List__2U1cg\",\"More\":\"TodoTasks_More__5JBDW\",\"Task\":\"TodoTasks_Task__3YQL-\",\"move-enter\":\"TodoTasks_move-enter__3JF88\",\"move-enter-active\":\"TodoTasks_move-enter-active__3byMI\",\"move-exit\":\"TodoTasks_move-exit__Q2PoR\",\"move-exit-active\":\"TodoTasks_move-exit-active__1yfV5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewTask\":\"CreateNewTask_NewTask__15w4c\",\"Input\":\"CreateNewTask_Input__1yhpY\",\"Select\":\"CreateNewTask_Select__1qJnQ\",\"Button\":\"CreateNewTask_Button__29-ED\",\"Add\":\"CreateNewTask_Add__1uVuK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WorkingList\":\"ToDoList_WorkingList__1fNzJ\",\"CurrentTaskArea\":\"ToDoList_CurrentTaskArea__UVanF\",\"MediaArea\":\"ToDoList_MediaArea__eesrU\",\"Music\":\"ToDoList_Music__eKFsj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task_Task__SpBrN\",\"Button\":\"Task_Button__2GgYb\",\"onGoing\":\"Task_onGoing__2sJp1\",\"Start\":\"Task_Start__XnxTD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MoonArea\":\"MoonAnimation_MoonArea__3SA0j\",\"BaseMoonShadow\":\"MoonAnimation_BaseMoonShadow__2qx5p\",\"ShadowChange\":\"MoonAnimation_ShadowChange__3krA8\",\"BaseMoonShadow2\":\"MoonAnimation_BaseMoonShadow2__3uvFW\",\"ShadowChange2\":\"MoonAnimation_ShadowChange2__1SKke\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MoonImg\":\"MoonImage_MoonImg__1yST1\"};","module.exports = __webpack_public_path__ + \"static/media/moon.08525a71.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FullList\":\"FullList_FullList__1C9r0\"};","module.exports = __webpack_public_path__ + \"static/media/Alarm_Clock.b84fccdc.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Bugle_Tune.cfb74f70.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Dinner_Bell_Triangle.fb6a37fc.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Medium_Bell_Ringing_Near.0328f8c8.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Back_To_The_Wood.b6a5d36c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Dusty_Road.87c87a1c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Stale_Mate.794133c0.mp3\";","import React from 'react';\r\n\r\nimport classes from './MoonImage.module.css';\r\nimport MoonImg from '../../../Assets/Images/moon.png';\r\n\r\nconst moonImage = (props) => (\r\n    <React.Fragment>\r\n        <img \r\n            src={MoonImg}\r\n            alt=\"Moon\"\r\n            className= {classes.MoonImg} />\r\n    </React.Fragment>\r\n)\r\n\r\nexport default moonImage;","import React from 'react';\r\nimport classes from './MoonAnimation.module.css';\r\n\r\nimport MoonImage from './MoonImage/MoonImage';\r\n\r\nconst moonAnimation = (props) => {\r\n    // 根據任務是否開始來改變css格式。\r\n    let animationState = props.running ? 'running' : 'paused';\r\n    let classNames = props.showAnimation ? [classes.BaseMoonShadow, classes.BaseMoonShadow2] : [null , null];\r\n    let style = {\r\n        animation: props.animationForm,\r\n        animationPlayState: animationState,\r\n        animationDuration: props.targetTime + 's'        \r\n    }\r\n    return (\r\n        <div className={classes.MoonArea}>\r\n            <MoonImage />\r\n            <div \r\n                className = {classNames[0]}\r\n                style= {style} />\r\n            <div \r\n                className = {classNames[1]}\r\n                style= {style} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default moonAnimation;","import React from 'react';\r\n\r\nimport classes from './CreateNewTask.module.css';\r\n\r\nconst createNewTask = (props) => (\r\n    <div className = {classes.NewTask}>\r\n        <form onSubmit = {props.submitted}>\r\n            <input \r\n                className={classes.Input}\r\n                type =  {props.inputElement.elementConfig.type}\r\n                placeholder = {props.inputElement.elementConfig.placeholder}\r\n                value = {props.inputElement.value}\r\n                onChange = {props.inputChanged}\r\n                required />\r\n            <select \r\n                className={classes.Select} \r\n                value = {props.selectElement.value}\r\n                onChange = {props.selectChanged}>\r\n                {props.selectElement.options.map(option => (\r\n                    <option key = {option.value} value = {option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            <button\r\n                className = {[classes.Button, classes.Add].join(' ')}>+</button>\r\n        </form>\r\n    </div>\r\n)\r\n\r\nexport default createNewTask;","import React from 'react';\r\n\r\nimport classes from './CurrentTask.module.css';\r\n\r\nconst onGoingTasks = (props) => {\r\n    // 計算所剩時間的分/秒。\r\n    let timesRemain = props.currentTask.time - props.timesPassed;\r\n    let minsRemain = Math.floor(timesRemain/60);\r\n    let secRemain = Math.floor(timesRemain%60);\r\n    // 若倒數結束(timesRemain為0)，分秒都顯示0。\r\n    // 改為倒數結束後直接切換到下一個任務後，不需要這個步驟了。\r\n    // if (timesRemain <= 0 ) {\r\n    //     minsRemain = 0;\r\n    //     secRemain = 0;    \r\n    // }\r\n\r\n    // 若任務正在進行(時間正在倒數)，顯示pause按鈕，反之則顯示start。\r\n    let buttonShow = !props.isRunning\r\n         ? <button \r\n            onClick = {props.startClicked}\r\n            disabled={props.isRunning || timesRemain <= 0}\r\n            className = {[classes.Button, classes.Start].join(' ')} />\r\n         : <button\r\n            onClick = {props.pauseClicked}\r\n            disabled={!props.isRunning || timesRemain <= 0}\r\n            className = {[classes.Button, classes.Pause].join(' ')} />\r\n\r\n    return (\r\n        <div className = {classes.CurrentTask}>\r\n            <p className = {classes.CurrentName}>{props.currentTask.name}</p>\r\n            <p className = {classes.CurrentTime}>{minsRemain+ 'min '} <br /> {secRemain + 'sec'} </p>\r\n            {buttonShow}\r\n            <button\r\n                onClick = {props.resetClicked}\r\n                disabled = {props.timesPassed === 0}\r\n                className = {[classes.Button, classes.Reset].join(' ')} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default onGoingTasks;","import React from 'react';\r\n\r\nimport classes from './Task.module.css';\r\n\r\nconst task = (props) => (\r\n    <div>\r\n        <p>{props.task.name} : <strong>{props.task.time}</strong>s</p>\r\n        <button \r\n            className = {[classes.Button, classes.onGoing].join(' ')}\r\n            onClick = {props.buttonClicked} />\r\n        <button \r\n            className = {[classes.Button, classes.Start].join(' ')}\r\n            onClick = {props.taskClicked} />\r\n    </div>\r\n)\r\n\r\nexport default task;","import React from 'react';\r\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\r\nimport CSSTransition from 'react-transition-group/CSSTransition';\r\n\r\nimport classes from './TodoTasks.module.css';\r\nimport Task from './Task/Task';\r\n\r\nconst todoTasks = (props) => {\r\n    // 利用filter排除掉正在執行的任務。\r\n    let tasks = props.tasks.filter(task => props.tasks.indexOf(task) !== props.currentTask );\r\n    // 只顯示前三個待辦事項。\r\n    let top3Tasks = tasks.slice(0, 3);\r\n    let taskLists = top3Tasks.map(task => (\r\n        <CSSTransition \r\n            key = {task.name}\r\n            classNames={{\r\n                enter: classes['move-enter'],\r\n                enterActive: classes['move-enter-active'],\r\n                exitActive: classes['move-exit-active'],\r\n                exit: classes['move-exit']\r\n            }}\r\n            timeout={300}>\r\n            <li  className={classes.Task}>\r\n                <Task \r\n                    task = {task}\r\n                    taskClicked = {() => props.taskClicked('task', task)}\r\n                    buttonClicked = {() => props.buttonClicked('Todo', task)}/>            \r\n            </li>\r\n        </CSSTransition>\r\n    ))\r\n    // 若tasks數列達到4個以上(一個current task，三個在列表中)，增加more連結，讓用戶能直達下方完整列表。\r\n    let more = props.tasks.length > 4 ? <a href='#fullList' className = {classes.More}>...More</a> : null;\r\n\r\n    return (\r\n        <div className =  {classes.TasksList}>\r\n            <TransitionGroup \r\n                component= \"ul\"\r\n                className={classes.List}>\r\n                    {taskLists}\r\n            </TransitionGroup>\r\n            {more}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default todoTasks;","import React from 'react';\r\nimport CSSTransition from 'react-transition-group/CSSTransition';\r\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\r\n\r\nimport classes from './List.module.css';\r\n\r\nconst list = (props) => {\r\n    let buttonText = '+';\r\n    let List = null;\r\n    let btnType = 'Start';\r\n    if (props.shouldExpand) {\r\n        buttonText = '-';\r\n        List =  props.items.list.map(item => {\r\n            // 已完成事項的按鈕功能並非執行，而是將已完成事項改為未完成，因此格式不同。\r\n            if (props.type === 'Done') {\r\n                btnType = 'Done';\r\n            }\r\n            return (\r\n                <CSSTransition \r\n                    key = {item.name}\r\n                    classNames={{\r\n                        enter: classes['move-enter'],\r\n                        enterActive: classes['move-enter-active'],\r\n                        exitActive: classes['move-exit-active'],\r\n                        exit: classes['move-exit']\r\n                    }}\r\n                    timeout={300}>\r\n                    <li \r\n                        key = {item.name} \r\n                        className = {classes.item}>\r\n                        {item.name}\r\n                        <button \r\n                            className = {[classes.Button, classes[btnType]].join(' ')}\r\n                            onClick =  {() => props.itemClicked(props.type, item)}/>    \r\n                    </li>\r\n                </CSSTransition>                \r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className = {classes.List}>\r\n            <span className = {classes.ListType}>{props.type.toUpperCase()}</span>\r\n            <button \r\n                className = {[classes.Button, classes.Add].join(' ')}\r\n                onClick = {props.clicked}>{buttonText}</button>\r\n            <TransitionGroup\r\n                component= \"ul\"\r\n                className={classes.items}>\r\n                {List}\r\n            </TransitionGroup>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default list;","import React from 'react';\r\n\r\nimport classes from './FullList.module.css';\r\nimport List from './List/List';\r\n\r\nconst fullList = (props) => {\r\n    // 將待辦事項、已完成事項、音樂及鬧鈴都個別做出列表。其中已完成事項的function不同。\r\n    let list = Object.keys(props.tasks).map((items) => {\r\n        let propsName = items === 'Done' ? props.itemUnDone : props.itemChange;\r\n        return (\r\n            <List \r\n                key = {items}\r\n                type = {items}\r\n                items = {props.tasks[items]}\r\n                shouldExpand = {props.tasks[items].shouldExpand}\r\n                clicked = {() => props.clicked(items)}\r\n                itemClicked = {propsName} />\r\n\r\n        )        \r\n    });\r\n\r\n    return (\r\n        <div className = {classes.FullList} id='fullList'>\r\n            {list}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default fullList;","import AlarmClock from './Alarm_Clock.mp3';\r\nimport BugleTune from './Bugle_Tune.mp3';\r\nimport DinnerBellTriangle from './Dinner_Bell_Triangle.mp3';\r\nimport MediumBellRingingNear from './Medium_Bell_Ringing_Near.mp3';\r\n\r\n\r\nconst alarms = [\r\n    {name: 'Medium Bell Ringing Near', src: MediumBellRingingNear},\r\n    {name: 'Alarm Clock', src: AlarmClock},\r\n    {name: 'Bugle Tune', src: BugleTune},\r\n    {name: 'Dinner Bell Triangle', src: DinnerBellTriangle},\r\n]\r\n\r\nexport default alarms;","import BackToTheWood from './Back_To_The_Wood.mp3';\r\nimport DustyRoad from './Dusty_Road.mp3';\r\nimport StaleMate from './Stale_Mate.mp3';\r\n\r\n\r\nconst musics = [\r\n    {name: 'Back To The Wood', src: BackToTheWood},\r\n    {name: 'Dusty Road', src: DustyRoad},\r\n    {name: 'Stale Mate', src: StaleMate},\r\n]\r\n\r\nexport default musics;","import React, { Component } from 'react';\r\n\r\nimport MoonAnimaion from '../../Components/MoonAnimaion/MoonAnimation';\r\nimport classes from './ToDoList.module.css';\r\nimport CreateNewTask from '../../Components/CreateNewTask/CreateNewTask';\r\nimport CurrentTask from '../../Components/CurrentTask/CurrentTask';\r\nimport TodoTasks from '../../Components/TodoTasks/TodoTasks';\r\nimport FullList from '../../Components/FullList/FullList';\r\nimport Alarms from '../../Assets/Audio/Alarm/Alarm';\r\nimport Musics from '../../Assets/Audio/Music/Music';\r\n\r\nclass TodoList extends Component {\r\n    state = {\r\n        items: {\r\n            Todo : {\r\n                list: [\r\n                    {name: 'First Thing to do', time: 30},\r\n                    {name: 'Second Thing to do', time: 60},\r\n                    {name: 'Third Thing to do', time: 90},    \r\n                    {name: 'Forth Thing to do', time: 30},    \r\n                    {name: 'Fifth Thing to do', time: 60},    \r\n                ],\r\n                shouldExpand: false, \r\n            },\r\n            Done : {\r\n                list: [\r\n                    {name: 'First Thing done', time: 25},\r\n                    {name: 'Second Thing done', time: 30},\r\n                    {name: 'Third Thing done', time: 35},    \r\n                ],\r\n                shouldExpand: false,\r\n            },\r\n            Music: {\r\n                list: Musics,\r\n                shouldExpand: false,\r\n            },\r\n            Alarm: {\r\n                list: Alarms,\r\n                shouldExpand: false,\r\n            }\r\n        },\r\n        // 用currentState控制目前的任務、背景音樂以及鬧鈴。\r\n        currentState: {\r\n            task: 0,\r\n            alarm: 0,\r\n            music: 0,\r\n        },\r\n        formContent: {\r\n            input: {\r\n                elementConfig : {\r\n                    type: 'text', \r\n                    placeholder: 'Mail Address',\r\n                },\r\n                value: '',\r\n            },\r\n            select: {\r\n                options: [\r\n                    {value: 30, displayValue: 'Estimated Time: 30s'},\r\n                    {value: 60, displayValue: 'Estimated Time: 60s'},\r\n                    {value: 90, displayValue: 'Estimated Time: 90s'},\r\n                ],\r\n                value: 30,\r\n            }\r\n        },\r\n        // isRunning控制時間是否繼續倒數以及動畫是否持續，showAnimation則是直接把animation去掉，在任務未開始時圖片不會被覆蓋。\r\n        isRunning: false,\r\n        showAnimation: false,\r\n        timesPassed: 0,\r\n        intervalId: null,\r\n    }\r\n\r\n    taskStartHandler = () => {\r\n        // 利用Date()計算經過時間，再更新state。\r\n        let startTime = new Date().getTime();\r\n        let updatedTimePassed = this.state.timesPassed;\r\n        let timer = setInterval(() => {\r\n            updatedTimePassed += (new Date().getTime() - startTime)/1000;\r\n            startTime = new Date().getTime();\r\n            if (Math.floor(updatedTimePassed) >= this.state.items.Todo.list[this.state.currentState.task].time) {\r\n                // 若任務時間到，則結束計時並播放鬧鈴，設定在10秒後結束鬧鈴。\r\n                clearInterval(this.state.intervalId);\r\n                this.alarm.load();\r\n                this.alarm.play();\r\n                setTimeout(() => {\r\n                    this.alarm.pause();                    \r\n                }, 10000);\r\n                // 將原本的任務移至Done列表。\r\n                this.taskDoneHandler('Todo', this.state.items.Todo.list[this.state.currentState.task]);\r\n                this.setState({\r\n                    isRunning: false, \r\n                    showAnimation: false,\r\n                    timesPassed: updatedTimePassed});\r\n            } else {\r\n                this.setState({\r\n                    timesPassed: updatedTimePassed,\r\n                    isRunning: true, \r\n                    showAnimation: true,\r\n                });\r\n            }\r\n        }, 100);\r\n        // 將intervalId存在state中，方便稍後通過其他function控制。\r\n        this.setState({intervalId: timer})\r\n    }\r\n\r\n    taskPauseHandler = () => {\r\n        // 將時間與動畫暫停，並清除interval，稍後點擊開始鍵後會重新設置。\r\n        this.setState({\r\n            isRunning: false, \r\n        });\r\n        clearInterval(this.state.intervalId)\r\n    }\r\n\r\n    taskResetHandler = () => {\r\n        // 將timePassed歸零，並讓動畫相關div消失。\r\n        this.setState({\r\n            isRunning: false,\r\n            timesPassed: 0,\r\n            showAnimation: false,\r\n        });\r\n        clearInterval(this.state.intervalId)\r\n    }\r\n\r\n    // 設定表格的value隨用戶輸入改變。\r\n    ChangeHandler = (event, type) => {\r\n        const updatedContent = {\r\n            ...this.state.formContent[type],\r\n            value: event.target.value,\r\n        }\r\n        const updatedForm = {\r\n            ...this.state.formContent,\r\n            [type]: updatedContent,\r\n        }\r\n        this.setState({formContent : updatedForm})\r\n    }\r\n\r\n    newTaskHandler = (event) => {\r\n        event.preventDefault();\r\n        // 將表格中資料更新至TodoList中，並重置表格。\r\n        const updatedTasks = {\r\n            ...this.state.items,\r\n            Todo: {\r\n                ...this.state.items.Todo,\r\n                list: [\r\n                    ...this.state.items.Todo.list,\r\n                    {\r\n                        name: this.state.formContent.input.value,\r\n                        time: this.state.formContent.select.value,\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n        const updatedForm = {\r\n            ...this.state.formContent,\r\n            input: {\r\n                ...this.state.formContent.input,\r\n                value: '',    \r\n            },\r\n            select: {\r\n                ...this.state.formContent.select,\r\n                value: 30,\r\n            },\r\n        }\r\n        this.setState({tasks: updatedTasks, formContent: updatedForm})\r\n    }\r\n\r\n    // 改變目前的任務、背景音樂或鬧鈴。\r\n    currentStateChangeHandler = (type, item) => {\r\n        // 預設為第一項。\r\n        let updatedIndex = 0;\r\n        switch (type) {\r\n            case 'task':\r\n                updatedIndex = this.state.items.Todo.list.indexOf(item);\r\n                break;\r\n            case 'music':\r\n                updatedIndex = this.state.items.Music.list.indexOf(item);\r\n                break;\r\n            case 'alarm':\r\n                updatedIndex = this.state.items.Alarm.list.indexOf(item);\r\n                break;\r\n            default: \r\n                return updatedIndex = 0;\r\n        }\r\n        const updatedState = {\r\n            ...this.state.currentState,\r\n            [type]:updatedIndex,\r\n        }\r\n        this.setState({ currentState : updatedState})\r\n        // 若目前的任務被改變，重置經過時間與動畫等。\r\n        if (type === 'task') {\r\n            this.taskResetHandler();\r\n        }\r\n    }\r\n\r\n    // 控制任務完成或未完成的function。\r\n    taskDoneHandler = (type, task) => {\r\n        // 若目標對象處於未完成狀態，則改為完成，反之亦然。\r\n        if (type === 'Todo') {\r\n            this.state.items.Todo.list.splice(this.state.items.Todo.list.indexOf(task), 1);\r\n            this.state.items.Done.list.push(task);\r\n        } else if (type === 'Done') {\r\n            this.state.items.Done.list.splice(this.state.items.Done.list.indexOf(task), 1);\r\n            this.state.items.Todo.list.push(task);\r\n        }\r\n        const updatedTodoTask = this.state.items.Todo.list;\r\n        const updatedDoneTask = this.state.items.Done.list;    \r\n        const updatedTasks = {\r\n            ...this.state.items,\r\n            Todo: {\r\n                ...this.state.items.Todo,\r\n                updatedTodoTask,\r\n            },\r\n            Done: {\r\n                ...this.state.items.Done,\r\n                updatedDoneTask\r\n            },\r\n        }\r\n        // 將目前未完成任務改為完成後，可能使目前任務index大於任務數量，若發生這種情況，則把目前任務改為現有任務的最後一項。\r\n        let updatedCurrentTask = this.state.currentState.task;\r\n        if (this.state.currentState.task >= (this.state.items.Todo.list.length - 1)) {\r\n            updatedCurrentTask = this.state.items.Todo.list.length - 1 ;\r\n        };\r\n        const updatedCurrentState = {\r\n            ...this.state.currentState,\r\n            task: updatedCurrentTask\r\n        }\r\n        this.setState({tasks: updatedTasks, currentState: updatedCurrentState})\r\n    }\r\n\r\n    // 控制列表展開\r\n    expandHandler = (type) => {\r\n        this.setState(prevState => ({\r\n            items: {\r\n                ...prevState.items,\r\n                [type] : {\r\n                    ...prevState.items[type],\r\n                    shouldExpand: !prevState.items[type].shouldExpand\r\n                }\r\n            }\r\n        }))        \r\n    }\r\n\r\n    // 改變目前的任務或音效，音效會在改變後自動播放。\r\n    changeItemHandler = (itemType, item) => {\r\n        switch (itemType) {\r\n            case 'Todo' :\r\n                this.currentStateChangeHandler('task', item);\r\n                this.WorkingList.scrollIntoView({behavior: 'smooth'})\r\n                break;\r\n            case 'Music':\r\n                this.currentStateChangeHandler('music', item);\r\n                this.music.pause();\r\n                this.music.load();\r\n                this.music.play();\r\n                break;\r\n            case 'Alarm':\r\n                this.currentStateChangeHandler('alarm', item);\r\n                this.music.pause();\r\n                this.alarm.pause();\r\n                this.alarm.load();\r\n                this.alarm.play();\r\n                // 鬧鈴在自動播放五秒後停止，並重新播放背景音樂\r\n                setTimeout(() => {\r\n                    this.alarm.pause();\r\n                    this.music.play();\r\n                }, 5000)\r\n                break;\r\n            default: \r\n                return;\r\n        }\r\n    }    \r\n\r\n    render () {\r\n        return (\r\n            <React.Fragment>\r\n                <div className = {classes.WorkingList} ref = {ref => this.WorkingList = ref}>\r\n                    <div className={classes.CurrentTaskArea}>\r\n                        <CurrentTask\r\n                            currentTask = {this.state.items.Todo.list[this.state.currentState.task]} \r\n                            startClicked = {this.taskStartHandler}\r\n                            pauseClicked = {this.taskPauseHandler}\r\n                            resetClicked = {this.taskResetHandler}\r\n                            isRunning = {this.state.isRunning}\r\n                            timesPassed = {this.state.timesPassed} />\r\n                        <CreateNewTask \r\n                            content = {this.state.formContent}\r\n                            inputElement = {this.state.formContent.input}\r\n                            selectElement = {this.state.formContent.select}\r\n                            inputChanged = {(event) => {this.ChangeHandler(event, 'input')}}\r\n                            selectChanged = {(event) => {this.ChangeHandler(event, 'select')}}\r\n                            submitted = {this.newTaskHandler} />\r\n                        <TodoTasks\r\n                            tasks = {this.state.items.Todo.list}\r\n                            currentTask = {this.state.currentState.task}\r\n                            taskClicked = {this.currentStateChangeHandler}\r\n                            buttonClicked = {this.taskDoneHandler} />\r\n                    </div>\r\n                    <div className = {classes.MediaArea}>\r\n                        <MoonAnimaion \r\n                            running = {this.state.isRunning}\r\n                            targetTime = {this.state.items.Todo.list[this.state.currentState.task].time}\r\n                            showAnimation = {this.state.showAnimation} />\r\n                        <div >\r\n                            <audio className = {classes.Music} controls loop ref = {ref => this.music = ref}>\r\n                                <source src= {this.state.items.Music.list[this.state.currentState.music].src} type = 'audio/mp3' />\r\n                            </audio>\r\n                            <audio ref = {ref => this.alarm = ref}>\r\n                                <source src = {this.state.items.Alarm.list[this.state.currentState.alarm].src} type = 'audio/mp3' />\r\n                            </audio>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <FullList \r\n                    tasks = {this.state.items}\r\n                    clicked = {this.expandHandler}\r\n                    itemChange = {this.changeItemHandler}\r\n                    itemUnDone = {this.taskDoneHandler} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import React , { Component } from 'react';\n\nimport ToDoList from './Container/ToDoLists/ToDoList';\n\nclass App extends Component {\n  render() {\n    return (\n      <ToDoList />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}